import sys
# import nacl.utils
import pickle
import nacl
from nacl.public import PrivateKey, Box
import logging
import nacl.signing
import nacl.encoding
import nacl.hash
import numpy
import itertools
import random
from collections import Counter

r = import_da("Replica")

class Olympus(process):

    def setup(list_clients: list, config: set):
        self.logger = logging.getLogger(__name__)
        self.HASHER = nacl.hash.sha256
        self.currConfigSeqNo = -1

        ## RECONFIG VARIABLES - start
        self.reconfig_in_progress = False
        self.wedged_from_all = {}
        self.wedged_from_quorum = {}
        self.longest_history_slot_orderstatement_map = {}
        self.get_running_state_send = False
        self.quorum_replicas = []
        self.quorum_replicas_combo = []
        self.list_replica_for_quorum_select = []
        self.recent_result_shuttle_for_every_client = {}
        self.first_time_quorum_select = True

        self.all_wedged_responses = []
        ## RECONFIG VARIABLES - end

        output("Setting up the Olympus...")
        ## use pynacl lib to initiailze all keys
        oly_priv_key = PrivateKey.generate()
        self.oly_private_key = oly_priv_key
        self.oly_public_key = oly_priv_key.public_key
        self.checkpoint_slot_no = 0

        self.replica_list = []

        self.olympus_signing_key = nacl.signing.SigningKey.generate()
        self.olympus_verify_key = self.olympus_signing_key.verify_key

        self.replica_signing_keys = {}
        self.replica_verify_keys = {}
        self.replica_public_keys = {}
        self.replica_private_keys = {}
        self.client_private_keys = {}
        self.client_public_keys = {}
        self.caughtupMessageHash = "DEFAULT"

        for client in list_clients:
            priv_key = PrivateKey.generate()
            self.client_public_keys[str(client)] = priv_key.public_key
            self.client_private_keys[str(client)] = priv_key

        createAndSetupReplicas()
        '''
        ## Create replica processes here
        no_replicas = int(config["num_replicas"])
        list_replica = []
        list_replica_for_quorum_select_t = []
        for i in range(0, len(config['replicaHostIPs'])):
            replica = new(r.Replica, num=1, at="ReplicaNode@"+config['replicaHostIPs'][i])
            replica_obj = replica.pop()
            list_replica.append(replica_obj)
            list_replica_for_quorum_select_t.append(str(replica_obj))

        #self.quorum_replicas = list(numpy.random.choice(list_replica_for_quorum_select_t, size=(int(config['t']) + 1), replace=False))
        # Delete the current quorum_replicas from list_replica for future use
        #for each_quorum_r in self.quorum_replicas:
        #    if(each_quorum_r in list_replica_for_quorum_select_t):
        #        list_replica_for_quorum_select_t.remove(each_quorum_r)


        #self.list_replica_for_quorum_select = list_replica_for_quorum_select_t
        setup(list_replica, (self, list_clients, list_replica, config, currConfigSeqNo))
        start(list_replica)
        self.replica_list = list_replica

        for replica in replica_list:
            priv_key = PrivateKey.generate()
            signing_key = nacl.signing.SigningKey.generate()
            self.replica_public_keys[str(replica)] = priv_key.public_key
            self.replica_private_keys[str(replica)] = priv_key

            self.replica_signing_keys[str(replica)] = signing_key
            self.replica_verify_keys[str(replica)] = signing_key.verify_key

        for replica in replica_list:
            keysForReplica = {}
            keysForReplica['olympus_verify_key'] = self.olympus_verify_key
            keysForReplica['oly_public_key'] = self.oly_public_key
            keysForReplica['private_key'] = self.replica_private_keys[str(replica)]
            keysForReplica['public_key'] = self.replica_public_keys[str(replica)]
            keysForReplica['client_public_keys'] = self.client_public_keys
            keysForReplica['replica_public_keys'] = self.replica_public_keys
            keysForReplica['replica_verify_keys'] = self.replica_verify_keys
            keysForReplica['signing_key'] = self.replica_signing_keys[str(replica)]
            output('Message type: [Keys] sending to ' + str(replica))
            send(('keys', keysForReplica), to= replica)

        output("Replica List: " + str(replica_list))
        output("Client List: " + str(list_clients))

        '''
        ## Olympus terminating flag
        self.terminate = False

    def sendCurrentConfiguration(sender):
        output('Message type: [current_configuration] Received from: ' + str(sender))
        client_config = {}
        client_config["currConfigSeqNo"] = self.currConfigSeqNo
        client_config["oly_public_key"] = self.oly_public_key
        client_config["replica_public_keys"] = self.replica_public_keys
        client_config["client_public_key"] = self.client_public_keys[str(sender)]
        client_config["client_private_key"] = self.client_private_keys[str(sender)]
        client_config["head_replica"] = self.replica_list[0]
        client_config["tail_replica"] = self.replica_list[len(replica_list)-1]
        client_config["replicas"] = self.replica_list
        client_config["replica_verify_keys"] = self.replica_verify_keys
        output('Message type: [cur_conf] Sending to: ' + str(sender))
        send(('cur_conf', client_config), to= sender)

    def receive(msg=('current_configuration'), from_= sender):
        sendCurrentConfiguration(sender)

    def getLongestHistory():
        slot_seqNo_dict = {}
        longest_history = []
        final_history_dict = {}
        inconsistent_replicas = []
        slot_orderstatement_map = {}
        for replica_key, each_wedged in self.wedged_from_quorum.items():
            sample_history = each_wedged
            for key_slot_no, each_order_stmt in sample_history.items():
                # structure of order_stmt is [self.slot_no, payload['client'], payload['seqNo'], payload['oper']]
                if(key_slot_no in slot_seqNo_dict):
                    curr_seq_no = each_order_stmt[2]
                    slot_seqNo_dict[key_slot_no].append(curr_seq_no)
                else:
                    # Till this point is the longest valid history - use this one
                    slot_seqNo_dict[key_slot_no] = []
                    slot_seqNo_dict[key_slot_no].append(each_order_stmt[2])

        for each_slot, list_seq in slot_seqNo_dict.items():
            cnt = Counter(list_seq)
            most_common_seq_no = cnt.most_common(1)[0][0]
            longest_history.append([each_slot, most_common_seq_no])
            final_history_dict[each_slot] = most_common_seq_no

        for replica_key, each_wedged in self.wedged_from_quorum.items():
            sample_history = each_wedged
            for key_slot_no, each_order_stmt in sample_history.items():
                curr_seq_no = each_order_stmt[2]
                if(curr_seq_no != final_history_dict[key_slot_no]):
                    inconsistent_replicas.append(replica_key)
                    break;
                else:
                    if(key_slot_no not in slot_orderstatement_map):
                        slot_orderstatement_map[key_slot_no] = each_order_stmt

        self.longest_history_slot_orderstatement_map = slot_orderstatement_map

        output = {}
        output['inconsistent_replicas'] = inconsistent_replicas
        output['longest_history'] = longest_history
        return output

    def checkConsistency_n_getLongestHistory():

        output = getLongestHistory();
        inconsistent_replicas = output['inconsistent_replicas']
        longest_history = output['longest_history']

        while(len(inconsistent_replicas) > 0):
            output('Inconsistent replicas FOUND...Choosing new quorum')
            self.quorum_replicas = []
            self.wedged_from_quorum = {}
            quorum_replicas_t = random.choice(self.quorum_replicas_combo)
            self.quorum_replicas_combo.remove(quorum_replicas_t)
            for each_quorum_replica in quorum_replicas_t:
                self.quorum_replicas.append(each_quorum_replica[0])
                self.wedged_from_quorum[each_quorum_replica[0]] = each_quorum_replica[1]

            '''
            for each_inconsistent_replica in inconsistent_replicas:
                self.wedged_from_quorum.pop(each_inconsistent_replica)
                self.quorum_replicas.remove(each_inconsistent_replica)
                self.list_replica_for_quorum_select.remove(each_inconsistent_replica)
                new_replacing_replica = numpy.random.choice(self.list_replica_for_quorum_select, size=1)[0]
                self.list_replica_for_quorum_select.remove(new_replacing_replica)
                self.quorum_replicas.append(new_replacing_replica)
                self.wedged_from_quorum[new_replacing_replica] = self.wedged_from_all[new_replacing_replica]
            '''

            new_output = getLongestHistory();
            inconsistent_replicas = new_output['inconsistent_replicas']
            longest_history = new_output['longest_history']

        ## Now sort the history entries based on slot_no
        longest_history.sort(key=lambda tup: tup[0])
        output('Longest history is - ')
        output(longest_history)
        return longest_history

    def cleanReconfigVariables():
        self.first_time_quorum_select = True
        self.reconfig_in_progress = False
        self.wedged_from_all = {}
        self.wedged_from_quorum = {}
        self.longest_history_slot_orderstatement_map = {}
        self.get_running_state_send = False
        self.quorum_replicas = []
        self.list_replica_for_quorum_select = []
        self.recent_result_shuttle_for_every_client = {}

    def abortOld_createNewReplicas():
        binary_abort_stmt = pickle.dumps('ABORT')
        signed_abort_stmt = self.olympus_signing_key.sign(binary_abort_stmt)
        for each_replica in self.replica_list:
            output('Message type: [Abort] sending to ' + str(each_replica))
            send(('abort', signed_abort_stmt), to= each_replica)

        createAndSetupReplicas()

    def createAndSetupReplicas():
        ## Create replica processes here
        output("Creating and setting up new Replicas..!")
        no_replicas = int(config["num_replicas"])
        list_replica = []
        list_replica_for_quorum_select_t = []
        for i in range(0, len(config['replicaHostIPs'])):
            replica = new(r.Replica, num=1, at="ReplicaNode@"+config['replicaHostIPs'][i])
            replica_obj = replica.pop()
            list_replica.append(replica_obj)
            list_replica_for_quorum_select_t.append(str(replica_obj))

        self.quorum_replicas = list(numpy.random.choice(list_replica_for_quorum_select_t, size=(int(config['t']) + 1), replace=False))
        # Delete the current quorum_replicas from list_replica for future use
        for each_quorum_r in self.quorum_replicas:
            if(each_quorum_r in list_replica_for_quorum_select_t):
                list_replica_for_quorum_select_t.remove(each_quorum_r)

        self.currConfigSeqNo += 1
        self.list_replica_for_quorum_select = list_replica_for_quorum_select_t
        setup(list_replica, (self, list_clients, list_replica, config, currConfigSeqNo))
        start(list_replica)
        self.replica_list = list_replica

        for replica in replica_list:
            priv_key = PrivateKey.generate()
            signing_key = nacl.signing.SigningKey.generate()
            self.replica_public_keys[str(replica)] = priv_key.public_key
            self.replica_private_keys[str(replica)] = priv_key

            self.replica_signing_keys[str(replica)] = signing_key
            self.replica_verify_keys[str(replica)] = signing_key.verify_key

        for replica in replica_list:
            keysForReplica = {}
            keysForReplica['olympus_verify_key'] = self.olympus_verify_key
            keysForReplica['oly_public_key'] = self.oly_public_key
            keysForReplica['private_key'] = self.replica_private_keys[str(replica)]
            keysForReplica['public_key'] = self.replica_public_keys[str(replica)]
            keysForReplica['client_public_keys'] = self.client_public_keys
            keysForReplica['replica_public_keys'] = self.replica_public_keys
            keysForReplica['replica_verify_keys'] = self.replica_verify_keys
            keysForReplica['signing_key'] = self.replica_signing_keys[str(replica)]
            output('Message type: [Keys] sending to ' + str(replica))
            send(('keys', keysForReplica), to= replica)

        output("Replica List: " + str(replica_list))
        output("Client List: " + str(list_clients))

    def receive(msg=('running_state', encrypted_payload), from_= sender):
        output('Message type: [running_state] Received from: ' + str(sender))
        decrypt_box = Box(self.oly_private_key, replica_public_keys[str(sender)])
        plaintext = decrypt_box.decrypt(encrypted_payload)
        payload = pickle.loads(plaintext)

        binary_current_state = pickle.dumps(payload['running_state'])
        hash_current_state = HASHER(binary_current_state, encoder=nacl.encoding.HexEncoder)

        if(hash_current_state == self.caughtupMessageHash):
            ## Abort all old replicas
            abortOld_createNewReplicas()
            for each_replica in self.replica_list:
                cleanReconfigVariables()
                inithist_msg = {}
                inithist_msg['current_state'] = payload['running_state']
                encrypted_msg = getEncryptedMsg(inithist_msg, self.replica_public_keys[str(each_replica)])
                output('Message type: [inithist] Sending to: ' + str(each_replica))
                send(('inithist', encrypted_msg), to= each_replica)

            for each_client in list_clients:
                sendCurrentConfiguration(each_client)
                #sendReconfigStatus(each_client)
        else:
            new_selected_replica_str = numpy.random.choice(quorum_replicas, size=1)
            new_selected_replica = getReplicaFromName(new_selected_replica_str)
            binary_get_running_state_msg = pickle.dumps('GET RUNNING STATE')
            signed_get_running_state_msg = self.olympus_signing_key.sign(binary_get_running_state_msg)
            output('Message type: [get_running_state] sending to ' + str(new_selected_replica))
            send(('get_running_state', signed_get_running_state_msg), to= new_selected_replica)

    '''
    def sendReconfigStatus(receiver):
        clientResult = {}
        clientResult['reconfig_in_progress'] = self.reconfig_in_progress

        encrypted_msg = getEncryptedMsg(clientResult, client_public_keys[str(receiver)])
        send(('config_changed', encrypted_msg), to= receiver)
    '''

    def receive(msg=('is_reconfig_in_progress'), from_= sender):
        clientResult = {}
        clientResult['reconfig_in_progress'] = self.reconfig_in_progress

        encrypted_msg = getEncryptedMsg(clientResult, client_public_keys[str(sender)])
        send(('is_reconfig_in_progress_response', encrypted_msg), to= sender)

    def receive(msg=('caughtup', encrypted_payload), from_= sender):
        output('Message type: [caughtup] Received from: ' + str(sender))
        decrypt_box = Box(self.oly_private_key, replica_public_keys[str(sender)])
        plaintext = decrypt_box.decrypt(encrypted_payload)
        payload = pickle.loads(plaintext)

        if(self.caughtupMessageHash == "DEFAULT"):
            self.caughtupMessageHash = payload['hash_current_state']

        res_proofs = payload['recent_result_proof_for_every_client']
        for client_name, each_res_proof in res_proofs.items():
            result_shuttle_t = {}
            if(client_name in self.recent_result_shuttle_for_every_client):
                result_shuttle_t = recent_result_shuttle_for_every_client[client_name]

            result_shuttle_t[str(sender)] = each_res_proof
            self.recent_result_shuttle_for_every_client[client_name] = result_shuttle_t

            output('length of recent_result_shuttle_for_every_client[client_name] - ' + str(len(self.recent_result_shuttle_for_every_client[client_name])))
            output('length of quorum_replicas - ' + str(len(self.quorum_replicas)))
            if(len(self.recent_result_shuttle_for_every_client[client_name]) == len(self.quorum_replicas)):
                if(self.get_running_state_send == False):
                    self.get_running_state_send = True
                    binary_get_running_state_msg = pickle.dumps('GET RUNNING STATE')
                    signed_get_running_state_msg = self.olympus_signing_key.sign(binary_get_running_state_msg)
                    output('Message type: [get_running_state] sending to ' + str(sender))
                    send(('get_running_state', signed_get_running_state_msg), to= sender)
                ## Received all result proofs from quorum of replicas and
                seq_no = each_res_proof[0][1]
                operation_name = each_res_proof[0][2]
                result_c = each_res_proof[0][4]
                clientResult = {}
                clientResult['seqNo'] = seq_no
                clientResult['client'] = client_name
                clientResult['oper'] = operation_name
                clientResult['result'] = result_c
                clientResult['result_proof'] = self.recent_result_shuttle_for_every_client[client_name]

                encrypted_msg = getEncryptedMsg(clientResult, client_public_keys[str(client_name)])
                send(('result_message_from_olympus', encrypted_msg), to= client_name)

    def receive(msg=('wedged', encrypted_payload), from_= sender):
        output('Message type: [wedged] Received from: ' + str(sender))
        decrypt_box = Box(self.oly_private_key, replica_public_keys[str(sender)])
        plaintext = decrypt_box.decrypt(encrypted_payload)
        payload = pickle.loads(plaintext)

        self.wedged_from_all[str(sender)] = payload['History']
        self.all_wedged_responses.append((str(sender), payload['History']))

        if(len(wedged_from_all) >= (int(config['t']) + 1)):
            list_quorum_replicas_combo = list(itertools.combinations(all_wedged_responses, (int(config['t']) + 1)))
            for each_combo in list_quorum_replicas_combo:
                if(each_combo not in self.quorum_replicas_combo):
                    self.quorum_replicas_combo.append(each_combo)

            if(self.first_time_quorum_select):
                self.quorum_replicas = []
                self.wedged_from_quorum = {}
                self.first_time_quorum_select = False
                quorum_replicas_t = random.choice(self.quorum_replicas_combo)
                self.quorum_replicas_combo.remove(quorum_replicas_t)
                for each_quorum_replica in quorum_replicas_t:
                    self.quorum_replicas.append(each_quorum_replica[0])
                    self.wedged_from_quorum[each_quorum_replica[0]] = each_quorum_replica[1]

                new_history = checkConsistency_n_getLongestHistory()
                computeAndSendCatchUp(new_history)

        '''
        if((str(sender)) in self.quorum_replicas):
            print('Adding quorum wedged response')
            self.wedged_from_quorum[str(sender)] = payload['History']

        if(len(self.wedged_from_quorum) == len(self.quorum_replicas)):
            print('Received all quorum wedged replies')
            # Received all the wedged replies from quorum. Start computing history now.
            new_history = checkConsistency_n_getLongestHistory()

            computeAndSendCatchUp(new_history)
        '''

    def computeAndSendCatchUp(new_history):
        for replica_key, each_wedged_history in self.wedged_from_quorum.items():
            operations_to_catchup = []
            for each_order in new_history:
                sample_slot_no = each_order[0]
                if(sample_slot_no not in each_wedged_history):
                    # Add entire order_Stmt to catchup operations
                    # structure of order_stmt is [self.slot_no, payload['client'], payload['seqNo'], payload['oper']]
                    operations_to_catchup.append(self.longest_history_slot_orderstatement_map[sample_slot_no])

            catchup_msg = {}
            catchup_msg['catchup_order_statements'] = operations_to_catchup
            encrypted_msg = getEncryptedMsg(catchup_msg, self.replica_public_keys[replica_key])
            replica_to_send = getReplicaFromName(replica_key)
            output('Message type: [catchup] Sending to: ' + str(replica_to_send))
            send(('catchup', encrypted_msg), to= replica_to_send)

    def getReplicaFromName(replica_key):
        for each_replica in self.replica_list:
            if(str(each_replica) == replica_key):
                return each_replica

    def getClientFromName(client_name):
        for each_client in list_clients:
            if(str(each_client) == client_name):
                return each_client

    def getEncryptedMsg(msg, receiverPubKey):
        box = Box(self.oly_private_key, receiverPubKey)
        binary_msg = pickle.dumps(msg)
        encrypted_msg = box.encrypt(binary_msg)
        return encrypted_msg

    def receive(msg=('reconfigure', encrypted_payload), from_= sender):
        output('Message type: [reconfigure] Received from: ' + str(sender))
        payload = {}
        if(str(sender) in client_public_keys):
            decrypt_box = Box(self.oly_private_key, client_public_keys[str(sender)])
            plaintext = decrypt_box.decrypt(encrypted_payload)
            payload = pickle.loads(plaintext)
        else:
            decrypt_box = Box(self.oly_private_key, replica_public_keys[str(sender)])
            plaintext = decrypt_box.decrypt(encrypted_payload)
            payload = pickle.loads(plaintext)

            if(validateReplicaReconfigRequest(payload)):
                output("Valid Reconfiguration request")
                if(self.reconfig_in_progress == False):
                    self.reconfig_in_progress = True
                    binary_wedge_stmt = pickle.dumps('WEDGE')
                    signed_wedge_stmt = self.olympus_signing_key.sign(binary_wedge_stmt)
                    for replica in replica_list:
                        output('Message type: [Wedge] sending to ' + str(replica))
                        send(('wedge', signed_wedge_stmt), to= replica)
                else:
                    output('Reconfiguration is already in progress...!!')
            else:
                output("Invalid Reconfiguration Request")

    def validateReplicaReconfigRequest(payload):
        if(payload['replicaConfigSeqNo'] == self.currConfigSeqNo):
            return True
        else:
            return False

    def run():
        output('Started Olympus...Waiting for an operations...')
        await(terminate)

    def dict_to_binary(the_dict):
        binary = pickle.dumps(the_dict)
        return binary

    def binary_to_dict(the_binary):
        d = pickle.loads(the_binary)
        return d

# -*- generated by 1.0.9 -*-
import da
PatternExpr_178 = da.pat.ConstantPattern('current_configuration')
PatternExpr_182 = da.pat.FreePattern('client1')
_config_object = {}
import sys

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_178, sources=[PatternExpr_182], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_177])])

    def setup(self, replica_set, client, config, **rest_204):
        super().setup(replica_set=replica_set, client=client, config=config, **rest_204)
        self._state.replica_set = replica_set
        self._state.client = client
        self._state.config = config
        self._state.terminate = False

    def run(self):
        self.output('Started Olympus...waiting for an operations...')
        super()._label('_st_label_202', block=False)
        _st_label_202 = 0
        while (_st_label_202 == 0):
            _st_label_202 += 1
            if self._state.terminate:
                _st_label_202 += 1
            else:
                super()._label('_st_label_202', block=True)
                _st_label_202 -= 1

    def _Olympus_handler_177(self, client1):
        self.output('Received request from Client for current configuration')
        print(self._state.config)
        self.send(self._state.config, to=client1)
        self._state.terminate = True
    _Olympus_handler_177._labels = None
    _Olympus_handler_177._notlabels = None

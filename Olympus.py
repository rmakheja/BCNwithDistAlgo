# -*- generated by 1.0.9 -*-
import da
PatternExpr_289 = da.pat.ConstantPattern('current_configuration')
PatternExpr_293 = da.pat.FreePattern('client1')
PatternExpr_375 = da.pat.ConstantPattern('reconfigure')
PatternExpr_379 = da.pat.FreePattern('client')
_config_object = {}
import sys
r = da.import_da('Replica')

class config():
    history = []
    quorom = []

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_289, sources=[PatternExpr_293], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_288]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_375, sources=[PatternExpr_379], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_374])])

    def setup(self, client, config, **rest_395):
        super().setup(client=client, config=config, **rest_395)
        self._state.client = client
        self._state.config = config
        self._state.oly_private_key = 'oly_priv_key_VALUE'
        self._state.oly_public_key = 'oly_pub_key_VALUE'
        self._state.replica_public_keys = []
        self._state.replica_private_keys = []
        self._state.client_public_key = 'client_pub_key_VALUE'
        self._state.client_private_key = 'client_priv_key_VALUE'
        self._state.caughtupMessageHash = 'some_caughtUpMsg_VALUE'
        no_replicas = self._state.config['num_clients']
        replica_set = self.new(r.Replica, num=no_replicas, at='ReplicaNode@127.0.0.1')
        list_replica = list(replica_set)
        print(('Type of replica_set variable - ' + str(type(replica_set))))
        for r_s in list_replica:
            print(r_s)
        self._setup(list_replica, (self._id, self._state.client, list_replica, self._state.config))
        self._start(list_replica)
        self._state.replica_list = list_replica
        self._state.terminate = False

    def run(self):
        self.output('Started Olympus...Initializing variables')
        self.output('Waiting for an operations...')
        super()._label('_st_label_393', block=False)
        _st_label_393 = 0
        while (_st_label_393 == 0):
            _st_label_393 += 1
            if self._state.terminate:
                _st_label_393 += 1
            else:
                super()._label('_st_label_393', block=True)
                _st_label_393 -= 1

    def _Olympus_handler_288(self, client1):
        self.output('Received request from Client for current configuration')
        client_config = {}
        client_config['oly_public_key'] = self._state.oly_public_key
        client_config['replica_public_keys'] = self._state.replica_public_keys
        client_config['client_public_key'] = self._state.client_public_key
        client_config['client_private_key'] = self._state.client_private_key
        client_config['head_replica'] = self._state.replica_list[0]
        client_config['tail_replica'] = self._state.replica_list[(len(self._state.replica_list) - 1)]
        self.output(('Client timeout received from system.conf is - ' + str(client_timeout)))
        client_config['client_timeout'] = self._state.config['client_timeout']
        client_config['']
        self.send(client_config, to=client1)
    _Olympus_handler_288._labels = None
    _Olympus_handler_288._notlabels = None

    def _Olympus_handler_374(self, client):
        self.output('Received reconfiguration request from Client')
        self._state.terminate = True
    _Olympus_handler_374._labels = None
    _Olympus_handler_374._notlabels = None

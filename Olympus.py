# -*- generated by 1.0.9 -*-
import da
PatternExpr_179 = da.pat.ConstantPattern('current_configuration')
PatternExpr_183 = da.pat.FreePattern('client1')
_config_object = {}
import sys

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_179, sources=[PatternExpr_183], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_178])])

    def setup(self, head_replica, client, config, **rest_205):
        super().setup(head_replica=head_replica, client=client, config=config, **rest_205)
        self._state.head_replica = head_replica
        self._state.client = client
        self._state.config = config
        self._state.terminate = False

    def run(self):
        self.output('Started Olympus...waiting for an operations...')
        super()._label('_st_label_203', block=False)
        _st_label_203 = 0
        while (_st_label_203 == 0):
            _st_label_203 += 1
            if self._state.terminate:
                _st_label_203 += 1
            else:
                super()._label('_st_label_203', block=True)
                _st_label_203 -= 1

    def _Olympus_handler_178(self, client1):
        self.output('Received request from Client for current configuration')
        print(self._state.config)
        self.send(self._state.config, to=client1)
        self._state.terminate = True
    _Olympus_handler_178._labels = None
    _Olympus_handler_178._notlabels = None

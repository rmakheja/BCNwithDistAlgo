# -*- generated by 1.0.9 -*-
import da
PatternExpr_181 = da.pat.FreePattern('config')
PatternExpr_185 = da.pat.FreePattern('olympus')
PatternExpr_202 = da.pat.FreePattern('result')
PatternExpr_206 = da.pat.FreePattern('head_replica')
_config_object = {}
import sys

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_181, sources=[PatternExpr_185], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_180]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_202, sources=[PatternExpr_206], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_201])])

    def setup(self, head_replica, olympus, **rest_243):
        super().setup(head_replica=head_replica, olympus=olympus, **rest_243)
        self._state.head_replica = head_replica
        self._state.olympus = olympus
        self._state.successFlag = False

    def run(self):
        self.execute_operation()
        super()._label('_st_label_239', block=False)
        _st_label_239 = 0
        while (_st_label_239 == 0):
            _st_label_239 += 1
            if self._state.successFlag:
                _st_label_239 += 1
            else:
                super()._label('_st_label_239', block=True)
                _st_label_239 -= 1
        self.output('terminating...')

    def execute_operation(self):
        self.output('Fetching current configuration request to Olympus')
        self.send('current_configuration', to=self._state.olympus)

    def abort(self):
        self.output('abort...!')

    def success(self):
        self.output('success..!')

    def execute_retransmission(self):
        self.output('Executing retransmission...')

    def _Client_handler_180(self, config, olympus):
        self.output('Received config from olympus - ')
        print(config)
        self.output('Sending operation to Replica')
        self.send('execute', to=self._state.head_replica)
    _Client_handler_180._labels = None
    _Client_handler_180._notlabels = None

    def _Client_handler_201(self, result, head_replica):
        self.output('Received result from replica -')
        self._state.successFlag = True
    _Client_handler_201._labels = None
    _Client_handler_201._notlabels = None

# -*- generated by 1.0.9 -*-
import da
PatternExpr_180 = da.pat.FreePattern('config')
PatternExpr_184 = da.pat.FreePattern('olympus')
PatternExpr_205 = da.pat.FreePattern('result')
PatternExpr_209 = da.pat.BoundPattern('_BoundPattern213_')
_config_object = {}
import sys

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_180, sources=[PatternExpr_184], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_179]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_205, sources=[PatternExpr_209], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_204])])

    def setup(self, list_replicas, olympus, **rest_248):
        super().setup(list_replicas=list_replicas, olympus=olympus, **rest_248)
        self._state.list_replicas = list_replicas
        self._state.olympus = olympus
        self._state.successFlag = False

    def run(self):
        self.execute_operation()
        super()._label('_st_label_244', block=False)
        _st_label_244 = 0
        while (_st_label_244 == 0):
            _st_label_244 += 1
            if self._state.successFlag:
                _st_label_244 += 1
            else:
                super()._label('_st_label_244', block=True)
                _st_label_244 -= 1
        self.output('terminating...')

    def execute_operation(self):
        self.output('Fetching current configuration request to Olympus')
        self.send('current_configuration', to=self._state.olympus)

    def abort(self):
        self.output('abort...!')

    def success(self):
        self.output('success..!')

    def execute_retransmission(self):
        self.output('Executing retransmission...')

    def _Client_handler_179(self, config, olympus):
        self.output('Received config from olympus - ')
        print(config)
        self.output('Sending operation to Replica')
        self.send(('execute', '0'), to=self._state.list_replicas[0])
    _Client_handler_179._labels = None
    _Client_handler_179._notlabels = None

    def _Client_handler_204(self, result):
        self.output('Received result from replica -')
        self._state.successFlag = True
    _Client_handler_204._labels = None
    _Client_handler_204._notlabels = None

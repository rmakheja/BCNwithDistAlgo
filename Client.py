# -*- generated by 1.0.9 -*-
import da
PatternExpr_186 = da.pat.FreePattern('config')
PatternExpr_189 = da.pat.FreePattern('olympus')
PatternExpr_218 = da.pat.FreePattern('result')
PatternExpr_222 = da.pat.BoundPattern('_BoundPattern228_')
_config_object = {}
import sys

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_186, sources=[PatternExpr_189], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_185]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_218, sources=[PatternExpr_222], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_217])])

    def setup(self, olympus, config, **rest_263):
        super().setup(olympus=olympus, config=config, **rest_263)
        self._state.olympus = olympus
        self._state.config = config
        self._state.curr_config = {}
        self._state.successFlag = False

    def run(self):
        self.execute_operation()
        super()._label('_st_label_259', block=False)
        _st_label_259 = 0
        while (_st_label_259 == 0):
            _st_label_259 += 1
            if self._state.successFlag:
                _st_label_259 += 1
            else:
                super()._label('_st_label_259', block=True)
                _st_label_259 -= 1
        self.output('terminating...')

    def execute_operation(self):
        self.output('Fetching current configuration request to Olympus')
        self.send('current_configuration', to=self._state.olympus)

    def abort(self):
        self.output('abort...!')

    def success(self):
        self.output('success..!')

    def execute_retransmission(self):
        self.output('Executing retransmission...')

    def _Client_handler_185(self, config, olympus):
        self.output('Received config from olympus - ')
        print(config)
        self.output('Sending operation to Replica')
        self._state.curr_config = config
        self.send(('execute', '0'), to=self._state.curr_config['head_replica'])
    _Client_handler_185._labels = None
    _Client_handler_185._notlabels = None

    def _Client_handler_217(self, result):
        self.output('Received result from replica -')
        self._state.successFlag = True
    _Client_handler_217._labels = None
    _Client_handler_217._notlabels = None

# -*- generated by 1.0.9 -*-
import da
PatternExpr_188 = da.pat.TuplePattern([da.pat.ConstantPattern('cur_conf'), da.pat.FreePattern('config')])
PatternExpr_194 = da.pat.FreePattern('olympus')
PatternExpr_216 = da.pat.TuplePattern([da.pat.ConstantPattern('execution_success'), da.pat.FreePattern('result')])
PatternExpr_223 = da.pat.BoundPattern('_BoundPattern229_')
_config_object = {}
import sys

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_188, sources=[PatternExpr_194], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_187]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_216, sources=[PatternExpr_223], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_215])])

    def setup(self, olympus, config, **rest_290):
        super().setup(olympus=olympus, config=config, **rest_290)
        self._state.olympus = olympus
        self._state.config = config
        self._state.curr_config = {}
        self._state.successFlag = False

    def run(self):
        self.fetch_config()
        super()._label('_st_label_280', block=False)
        _st_label_280 = 0
        while (_st_label_280 == 0):
            _st_label_280 += 1
            if self._state.successFlag:
                _st_label_280 += 1
            else:
                super()._label('_st_label_280', block=True)
                _st_label_280 -= 1
        self.execute_operation()
        super()._label('_st_label_286', block=False)
        _st_label_286 = 0
        while (_st_label_286 == 0):
            _st_label_286 += 1
            if self._state.successFlag:
                _st_label_286 += 1
            else:
                super()._label('_st_label_286', block=True)
                _st_label_286 -= 1
        self.output('terminating...')

    def execute_operation(self):
        self.send(('execute', '0'), to=self._state.curr_config['head_replica'])
        self._state.successFlag = False

    def fetch_config(self):
        self.output('Fetching current configuration request to Olympus')
        self.send('current_configuration', to=self._state.olympus)

    def abort(self):
        self.output('abort...!')

    def success(self):
        self.output('success..!')

    def execute_retransmission(self):
        self.send('reconfigure', to=self._state.olympus)
        self.output('Executing retransmission...')

    def _Client_handler_187(self, config, olympus):
        self._state.curr_config = config
        self.output('Received config from olympus - ')
        print(self._state.curr_config)
        self._state.successFlag = True
    _Client_handler_187._labels = None
    _Client_handler_187._notlabels = None

    def _Client_handler_215(self, result):
        self.output('Received result from replica -', result)
        self._state.successFlag = True
    _Client_handler_215._labels = None
    _Client_handler_215._notlabels = None

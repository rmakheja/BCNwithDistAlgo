# -*- generated by 1.0.9 -*-
import da
PatternExpr_174 = da.pat.ConstantPattern('execute')
PatternExpr_178 = da.pat.FreePattern('client1')
_config_object = {}

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_174, sources=[PatternExpr_178], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_173])])

    def setup(self, olympus, client, **rest_196):
        super().setup(olympus=olympus, client=client, **rest_196)
        self._state.olympus = olympus
        self._state.client = client
        self._state.terminate = False

    def run(self):
        self.output('Started Replica...waiting for an operations...')
        super()._label('_st_label_194', block=False)
        _st_label_194 = 0
        while (_st_label_194 == 0):
            _st_label_194 += 1
            if self._state.terminate:
                _st_label_194 += 1
            else:
                super()._label('_st_label_194', block=True)
                _st_label_194 -= 1

    def _Replica_handler_173(self, client1):
        self.output('Received request from Client for task execution')
        self.send('execution_success', to=client1)
        self._state.terminate = True
    _Replica_handler_173._labels = None
    _Replica_handler_173._notlabels = None

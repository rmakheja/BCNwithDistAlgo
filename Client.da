import sys

class Client(process):

    def setup(olympus: Olympus, config: set):
        self.curr_config = {}
        self.successFlag = False

    def receive(msg=('cur_conf', config), from_= olympus):
        self.curr_config = config
        output('Received config from olympus - ')
        print(curr_config)


    def receive(msg=('execution_success', result), from_= self.curr_config["tail_replica"]):
        output('Received result from replica -', result)
        successFlag = True

    def receive(msg=('retrans_res', result), from_= self.curr_config["head_replica"]):
        output('Received retrans result from replica -', result)
        successFlag = True

    def execute_operation():
        print('sending operation')
        send(('execute', '0'), to= self.curr_config["head_replica"])
        successFlag = False;

    def fetch_config():
        # start timer
        output('Fetching current configuration request to Olympus')
        send(('current_configuration'), to= olympus)

    def abort():
        output('abort...!')
    def success():
        output('success..!')

    def execute_retransmission():
        output('Executing retransmission...')
        send(('retrans', '0'), to= self.curr_config["head_replica"])

    def run():
        fetch_config();
        await(successFlag)
        execute_operation()
        if await(successFlag):
            output('terminating...');
        elif timeout(2):
            execute_retransmission();
            output('Executed retransmission...')
            if await(successFlag):
                print('retransmit worked...so did timeout...terminating...');
            elif timeout(5):
                print('retransmit failed...but Timeout worked');

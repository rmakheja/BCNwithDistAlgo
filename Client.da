import sys

class Client(process):

    def setup(olympus: Olympus, sys_config: set):
        self.successFlag = False
        self.resultList = [];
        self.seqNo = -1;
        self.foundResponse = False
        self.responsesCount = 0
        self.invalidResponses = 0
        self.curr_config = {};

    def receive(msg=('cur_conf', config), from_= olympus):
        self.curr_config = config
        output('Received config from olympus - ')
        print(curr_config)
        successFlag = True

    def receive(msg=('execution_success', result), from_= sender):
        if self.seqNo == int(result['seqNo']) :
            output('Received result from replica -', result)
            if is_valid_response(result):
                resultList.append(result['res']);
                successFlag = True
            else:
                print('ask for reconfig...received invalid result');

    def receive(msg=('retrans_res', result), from_= sender):
        print('retrans: ',sender)
        if self.seqNo == int(result['seqNo']) :
            output('Received result from replica -', result)
            if not foundResponse and responsesCount != self.sys_config['num_replicas'] and invalidResponses <= self.sys_config['failures_handled'] + 1:
                responsesCount += 1;
                if is_valid_response(result) :
                    resultList.append(result['res'])
                    foundResponse = True
                else :
                    invalidResponses += 1;


    def execute_operation():
        print('sending operations')
        operations = self.sys_config['workload'];
        #idx => use as sequence number for oper
        for oper in operations:
            seqNo += 1;
            # start timer and associate it with this <ind,oper>
            successFlag = False;
            msg = {'seqNo': self.seqNo, 'oper': oper};
            send(('execute', msg, 0), to= self.curr_config['head_replica']);
            if await(successFlag):
                print(resultList[self.seqNo]);
            elif timeout(2):
                execute_retransmission(msg);
                await(foundResponse)
                print(resultList[self.seqNo]);

    def fetch_config():
        # start timer
        output('Fetching current configuration request to Olympus')
        send(('current_configuration'), to= olympus)

    def is_valid_response(res):
        return True;

    def abort():
        output('abort...!')
    def success():
        output('success..!')

    def execute_retransmission(msg):
        output('Executing retransmission...')
        self.foundResponse = False
        self.responsesCount = 0
        self.invalidResponses = 0
        for replica in self.curr_config['replicas']:
            send(('retrans', msg, '0'), to= replica)

    def run():
        fetch_config();
        await(successFlag)
        execute_operation()
        print('Terminating');
        #if await(successFlag):
        #    output('terminating...');
        #elif timeout(2):
        #    execute_retransmission();
        #    output('Executed retransmission...')
        #    if await(successFlag):
        #        print('retransmit worked...so did timeout...terminating...', self.ope);
        #    elif timeout(5):
        #        print('retransmit failed...but Timeout worked');


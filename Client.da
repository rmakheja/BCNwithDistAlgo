import sys

class Client(process):

    def setup(olympus: Olympus, sys_config: set):
        self.successFlag = False
        self.resultList = [];
        self.seqNo = -1;
        self.foundResponse = False
        self.responsesCount = 0
        self.invalidResponses = 0
        self.curr_config = {};

    def receive(msg=('cur_conf', config), from_= olympus):
        self.curr_config = config
        successFlag = True

    def receive(msg=('execution_success', result), from_= sender):
        if self.seqNo == int(result['seqNo']) and result['client'] == self:
            output('Received result from replica -', result)
            if is_valid_response(result):
                resultList.append(result['result']);
                successFlag = True
            else:
                print('ask for reconfig...received invalid result');

    def receive(msg=('retrans_res', result), from_= sender):
        output('retrans res sender: ',sender)
        if self.seqNo == int(result['seqNo']) :
            if not foundResponse and responsesCount != self.sys_config['num_replicas'] and invalidResponses <= self.sys_config['failures_handled'] + 1:
                responsesCount += 1;
                if is_valid_response(result) :
                    resultList.append(result['result'])
                    foundResponse = True
                else :
                    invalidResponses += 1;

    def receive(msg=(('Error - Replica Immutable')), from_= sender):
        ## validate with encription if valid sender has send this error msg
        ## if so retrive latest configuration and try again
        print('Recevied Error - Replica Immutable from - ' + str(sender))

    def execute_operation():

        operations = sys_config['workload'][str(self)]
        output('sending operations.....')
        output(operations)
        for oper in operations:
            seqNo += 1;
            successFlag = False;
            msg = {'seqNo': self.seqNo, 'oper': oper, 'client': self};
            send(('execute', msg, 0), to= self.curr_config['head_replica']);
            if await(successFlag):
                output('Received successful result...')
                output(resultList[self.seqNo]);
            elif timeout(2):
                print('Timeout...Executing retransmission...')
                execute_retransmission(msg);
                await(foundResponse)
                print(resultList[self.seqNo]);

    def fetch_config():
        # start timer
        print('Fetching current configuration request to Olympus')
        send(('current_configuration'), to= olympus)

    def is_valid_response(res):
        return True;

    def abort():
        print('abort...!')
    def success():
        print('success..!')

    def execute_retransmission(msg):
        print('Executing retransmission...')
        self.foundResponse = False
        self.responsesCount = 0
        self.invalidResponses = 0
        for replica in self.curr_config['replicas']:
            send(('retrans', msg, '0'), to= replica)

    def run():
        fetch_config();
        await(successFlag)
        execute_operation()
        print('Terminating...');
        #if await(successFlag):
        #    print('terminating...');
        #elif timeout(2):
        #    execute_retransmission();
        #    print('Executed retransmission...')
        #    if await(successFlag):
        #        print('retransmit worked...so did timeout...terminating...', self.ope);
        #    elif timeout(5):
        #        print('retransmit failed...but Timeout worked');


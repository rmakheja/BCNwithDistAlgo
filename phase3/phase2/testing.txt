File name : case1_system.conf
	test_case_name = max_requests_with_pseudorandom_no_failure
	t = 3
	num_clients = 10
	No Failures

	Scenario tested : 

			Maximum no of clients all with pseudorandom workload.
	
	Expected behavior : 
			
			Replicas perform operations on same or different keys based on workload generated. There should be no failure/retransmission. Validation at the end of test case should pass in all clients. 


File name : case2_system.conf
	test_case_name = max_clients_with_same_keys_for_each_client
	t = 4
	num_clients = 10
	No Failures

	Scenario tested : 

			Maximum no of clients. Client perform operations on same keys.
	
	Expected behavior : 
			
			Replicas perform operations on same keys, there should be no failure/retransmission. Validation at the end of test case should pass in all clients. The result will be different then the result obtained when only one client would have run its operations. No pseudorandom workload used.


File name : case3_system.conf

	test_case_name = different_keys_for_each_client
	t = 1
	num_clients = 4
	No Failures

	Scenario tested : 

			Clients perform operations on different keys.
	
	Expected behavior : 
			
			Replicas perform operations on different keys, there should be no failure/retransmission. Validation at the end of test case should pass in all clients. The result will be similar to the result obtained when only one client would have run its operations.


File name : case4_system.conf

	test_case_name = same_keys_for_each_client
	t = 1
	num_clients = 4
	No Failures

	Scenario tested : 

			Pseudorandom workload is generated. Client perform operations on same keys.
	
	Expected behavior : 
			
			Replicas perform operations on same keys, there should be no failure/retransmission. Validation at the end of test case should pass in all clients. The result will be different then the result obtained when only one client would have run its operations.

File name : case5_system.conf

	test_case_name = change_operation_at_head
	t = 1
	num_clients = 4
	failures[0,0] = client_request(1,3), change_operation();

	Scenario tested : 

			Pseudorandom workload is generated. At head, operation is changed in order and result statement and then forwarded
	
	Expected behavior : 
			
			Second replica drops the order shuttle due to operation not matching (and will thus ask for reconfig in phase 3)
			Client does not receive result and retransmits. But as head will find the operation in the history, it will keep waiting for result shuttle. Thus client does not receive any result and does not proceed to next request.


File name : case6_system.conf

	test_case_name = change_operation_at_replica2
	t = 1
	num_clients = 4
	failures[0,1] = shuttle(1,3), change_operation();

	Scenario tested : 

			Pseudorandom workload is generated. At second replica, operation is changed in order and result statement and then forwarded
	
	Expected behavior : 
			
			Tail drops the order shuttle due to operation not matching (and will thus ask for reconfig in phase 3)
			Client does not receive result and retransmits. But as head will find the operation in the history, it will keep waiting for result shuttle. Thus client does not receive any result and does not proceed to next request.

File name : case7_system.conf

	test_case_name = change_operation_at_tail
	t = 1
	num_clients = 4
	failures[0,2] = shuttle(1,3), change_operation();

	Scenario tested : 

			Pseudorandom workload is generated. At tail, operation is changed in order and result statement and then forwarded
	
	Expected behavior : 
			
			Second replica drops the result shuttle due to operation not matching (and will thus ask for reconfig in phase 3)
			Tail had sent the incorrect result proof to the client, who rejects the result and retransmits. All the replicas will again send the invalid result proof in the cache.
			Thus client does not receive any valid result and does not proceed to next request.


File name : case8_system.conf

	test_case_name = drop_result
	t = 1
	num_clients = 4
	failures[0,1] = shuttle(1,3), drop_result_stmt(); 

	Scenario tested : 

			Pseudorandom workload is generated. At second replica, result statement of head is droppeddue to failure trigger on result_shuttle.
	
	Expected behavior : 
			Second replica drops head result from the result proof and forwards the result shuttle.
			Head receives incorrect result proof and caches it.
			Tail had sent the correct result proof to the client, who accepts the result and proceeds to next request.


File name : case9_system.conf
	test_case_name = change_result_drop_result
	t = 1
	num_clients = 4
	failures[0,2] = shuttle(1,3), change_result(); shuttle(1,3), drop_result_stmt();

	Scenario tested : 

			Pseudorandom workload is generated. Result at tail is changed as well as head result statement is dropped from the proof, due to failure trigger on shuttle. Retransmission by client and receiving invalid result again.
	
	Expected behavior : 

			Tail should append hash of 'OK' in the result statement and also drop head's result statement. This result proof is cached and forwarded. 

			Other replicas will reject the result shuttle started by tail (and in phase 3 will send reconfig). 
	
			The client will send retransmission due to invalid result proof, but as head will find the operation in the history, it will keep waiting for result shuttle, which was rejected by replica before tail. Thus client does not receive any result and does not proceed to next request. The tail however sends the cached result, which is again rejected by the client. Thus not proceeding to next request.

			However client will accpet the result if the original result was also 'OK'


File name : case10_system.conf
	test_case_name = change_result_replica2
	t = 1
	num_clients = 4
	failures[0,1] = shuttle(1,4), change_result();

	Scenario tested : 
			Pseudorandom workload is generated. Result at second replica is changed due to failure trigger on shuttle. Retransmission of reuqest happens due to invalid result proof received at tail
	
	Expected behavior : 
			Replica should append hash of 'OK' in the result statement. But, tail does not accepts the result proof as the result hashes dont match. Thus dropping the shuttle (and in phase 3 will send reconfig). The client will send retransmission, but as the head will find the operation in the history, it will keep waiting for result shuttle, which was not started by tail. Thus client does not receive any result and does not proceed to next request.
			
			However if the original result was 'OK', it will proceed normally without any failure


File name : case11_system.conf
	test_case_name = change_result_at_tail
	t = 1
	num_clients = 4
	failures[0,2] = shuttle(1,4), change_result();

	Scenario tested : 

			Pseudorandom workload is generated. Result at tail is changed due to failure trigger on shuttle

	Expected behavior : 

			tail should append hash of 'OK' in the result statement. But, client accepts the result as in the result proof t+1 correct hashes are present. The client will proceed to next request

			If the original result was 'OK', there will be no mismatch



import sys

class Replica(process):
    def setup(olympus: Olympus, client: Client, list_replicas: list, config: set):
        self.history = {}
        self.cache = {}
        self.slot_no = 0
        self.core_data = {}
        self.terminate = False
        self.isImmutable = False

    def receive(msg=('result_shuttle', payload, replica_index), from_= sender):
        ind = int(replica_index)
        if(sender == list_replicas[ind + 1]):
            print('Received the result shuttle')
            cache[payload['seqNo']] = {'seqNo': payload['seqNo'], 'result': payload['result'], 'result_proof': payload['result_proof']}
            ind -= 1
            if(ind >= 0):
                send(('result_shuttle', payload, ind), to= list_replicas[ind])
        else:
            print('discarding the result shuttle due to invalid sender')
    def receive(msg=('execute', payload, replica_index), from_= sender):
        # print('Received request from Client for task execution ', payload)
        ind = int(replica_index)
        ind += 1

        if(ind == 1):
            print('In HEAD')
            ## HEAD case
            ## Verify if this slot is not already occupied and its previous is occupied.
            if(self.slot_no not in history and ( self.slot_no == 0 or (self.slot_no - 1) in history)) :
                result = execute_actual_command(payload['oper'])
                order_shuttle = payload
                order_shuttle['type'] = "Order Shuttle"
                order_shuttle['slot_no'] = self.slot_no
                order_shuttle['result'] = result
                order_proof = []
                result_proof = []
                order_stmt = ('ORDER', self.slot_no, payload['seqNo'], payload['oper']);
                order_shuttle = process_order_shuttle(order_shuttle, order_proof, result_proof, order_stmt, result)
                history[order_shuttle['slot_no']] = order_stmt
                send(('execute', order_shuttle, str(ind)), to= list_replicas[ind])
                self.slot_no +=1
            else:
                print('invalid slot_no... or waiting for previous slot')
        elif(ind == (len(list_replicas))):

            print('In TAIL')
            ## TAIL case
            result = ""
            order_shuttle = payload
            order_stmt = ('ORDER', payload['slot_no'], payload['seqNo'], payload['oper']);
            if(validate_order_proof(order_shuttle["order_proof"],order_stmt)):
                result = execute_actual_command(order_shuttle['oper'])
                order_proof = order_shuttle['order_proof']
                result_proof = order_shuttle['result_proof']

                if not validate_result_proof(result_proof, result):
                    print('invalid result_proof')
                    ## Reconfig request from replica
                else :
                    order_shuttle = process_order_shuttle(order_shuttle, order_proof, result_proof, order_stmt, result)

                    history[order_shuttle['slot_no']] = order_stmt
                    cache[order_shuttle['seqNo']] = {'seqNo': payload['seqNo'], 'result': payload['result'], 'result_proof': payload['result_proof']}

                    clientResult = {}
                    clientResult['seqNo'] = payload['seqNo']
                    clientResult['oper'] = payload['oper']
                    clientResult['result'] = result
                    clientResult['result_proof'] = order_shuttle['result_proof']

                    ## ind is already beyond last replica index. So subtract 2
                    ind = ind - 2
                    send(('result_shuttle', clientResult, ind), to= list_replicas[ind])

                    ## Send Result to client
                    send(('execution_success', clientResult), to= client)
            else:
                print('Some error in order proof validation. Reconfigure the system...')
                ## Reconfig request from replica

        else:
            ## REST of the cases
            print('In MIDDLE')
            order_shuttle = payload
            order_stmt = ('ORDER', payload['slot_no'], payload['seqNo'], payload['oper']);
            if(validate_order_proof(order_shuttle["order_proof"],order_stmt)):
                result = execute_actual_command(order_shuttle['oper'])
                order_proof = order_shuttle['order_proof']
                result_proof = order_shuttle['result_proof']

                if not validate_result_proof(result_proof,result):
                    print('invalid result_proof')
                    ## Reconfig request from replica
                else :
                    order_shuttle = process_order_shuttle(order_shuttle, order_proof, result_proof, order_stmt, result)
                    history[order_shuttle['slot_no']] = order_stmt
                    send(('execute', order_shuttle, str(ind)), to= list_replicas[ind])
            else:
                print('Some error in order proof validation. Reconfigure the system...')
                ## Reconfig request from replica

    def process_order_shuttle(order_shuttle, order_proof, result_proof, order_stmt, result):
        order_proof.append(order_stmt)
        order_shuttle['order_proof'] = order_proof
        result_hash = "##THIS IS RESULT HASH of " + result + " ##";
        result_proof.append(('RESULT', order_shuttle['seqNo'], order_shuttle['oper'], result_hash))
        order_shuttle['result_proof'] =result_proof
        return order_shuttle

    def validate_order_proof(order_proof,order_stmt):
        #check if received slot no is not in history and the previous slot is finished
        slot_no = int(order_stmt[1])
        if(slot_no in history or ( slot_no != 0 and (slot_no - 1) in history)) :
            return False
        for each_order_p in order_proof:
            if(each_order_p != order_stmt):
                return False;
        return True

    def validate_result_proof(result_proof,result):
        cur_hash = "##THIS IS RESULT HASH of " + result + " ##";
        for res_stmt in result_proof:
            if res_stmt[3] != cur_hash:
                return False
        return True;

    def execute_actual_command(operation):
        print('Executing actual operation command ...' + operation)
        result = ""
        ## execute operation on current state
        splits = operation.split("'")
        if(operation[0] == 'p'):
            core_data[splits[1]] = splits[3]
            result = "OK"
        elif(operation[0] == 'g'):
            if(splits[1] in core_data):
                result = core_data[splits[1]]
            else:
                result = ""
        elif(operation[0] == 'a'):
            if(splits[1] in core_data):
                core_data[splits[1]] = core_data[splits[1]] + splits[3]
                result = "OK"
            else:
                result = "fail"
        elif(operation[0] == 's'):
            start_end = splits[3].split(':')
            if((int(start_end[0]) >= 0) and (int(start_end[1]) <= len(core_data[splits[1]]))):
                core_data[splits[1]] = core_data[splits[1]][int(start_end[0]):int(start_end[1])]
                result = "OK"
            else:
                result = "OK"
        else:
            result = "fail"
        return result

    def receive(msg=('retrans', command, replica_index), from_= sender):
        print('Received retransmission...')
        if(command['seqNo'] in cache):
            send(('retrans_res', cache[command['seqNo']]), to= client)
        elif(self.isImmutable):
            send(('Error - Replica Immutable'), to= client)
        else:
            ind = int(replica_index)
            ind += 1
            if(ind == 1):
                ## HEAD
                #check if oper in history
                foundSlot = False
                for slot in history:
                    stmt = history[slot]
                    if(stmt[2] == command['seqNo'] and stmt[3] == command['oper']):
                        FoundSlot = True
                        break;
                if not foundSlot:
                    send(('execute', command, 0), to= list_replicas[0])
                if await(command['seqNo'] in cache):
                    send(('retrans_res', cache[command['seqNo']]), to= client)
                elif timeout(5):
                    print('retrans failed, head dint receive result shuttle')
                    ##send reconfig
                ## Start the replica timer for retranmission
            else:
                ## send retrans to head and wait for result.
                send(('retrans', command, 0), to= list_replicas[0])
                if await(command['seqNo'] in cache):
                    send(('retrans_res', cache[command['seqNo']]), to= client)
                elif timeout(5):
                    print('retrans failed, replica dint receive result shuttle');
                    ##send reconfig


    def run():
        print('Started Replica...waiting for an operations...')
        await(terminate)
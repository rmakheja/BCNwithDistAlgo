import sys

class Replica(process):
    def setup(olympus: Olympus, client: Client, list_replicas: list, config: set):
        self.history = []
        self.cache = []
        self.slot_no = 0
        self.core_data = {}
        self.terminate = False

    def receive(msg=('result_shuttle', payload, replica_index), from_= sender):
        output('Received the result shuttle')
        history.append({slot_no, payload['seqNo'], payload['oper']})
        cache.append(payload)
        ind = int(replica_index)
        if(ind > 0):
            ind -= 1
            send(('result_shuttle', payload, ind), to= list_replicas[ind])

    def receive(msg=('execute', payload, replica_index), from_= sender):
        # output('Received request from Client for task execution ', payload)
        print('Replica i received - ', replica_index)
        ind = int(replica_index)

        ind += 1
        if(ind == 1):
            output('In HEAD')
            ## HEAD case
            result = execute_actual_command(payload['oper'])

            order_shuttle = payload
            order_shuttle['type'] = "Order Shuttle"
            order_shuttle['slot_no'] = self.slot_no
            order_shuttle['result'] = result
            order_proof = []
            result_proof = []

            order_shuttle = process_order_shuttle(order_shuttle, order_proof, result_proof)

            send(('execute', order_shuttle, str(ind)), to= list_replicas[ind])
        elif(ind == (len(list_replicas))):
            output('In TAIL')
            ## TAIL case
            result = ""
            order_shuttle = payload
            if(validate_order_proof(order_shuttle["order_proof"])):
                result = execute_actual_command(order_shuttle['oper'])
                ## cross-verify is this result matches the order_shuttle['result'],
                ## If not, some error in system. Re-config

                order_proof = order_shuttle['order_proof']
                result_proof = order_shuttle['result_proof']

                order_shuttle = process_order_shuttle(order_shuttle, order_proof, result_proof)

                ## Now this operation is persistent, So add it to its history
                history.append({slot_no, payload['seqNo'], payload['oper']})

                ## ind is already beyond last replica index. So subtract 2
                ind = ind - 2
                send(('result_shuttle', order_shuttle, ind), to= list_replicas[ind])

                ## Send Result to client
                newPayload = {}
                newPayload['seqNo'] = payload['seqNo']
                newPayload['result'] = result
                newPayload['result_proof'] = order_shuttle['result_proof']
                send(('execution_success', newPayload), to= client)
            else:
                print('Some error in order proof validation. Reconfigure the system...')
                ## Reconfig request from replica

        else:
            ## REST of the cases
            output('In MIDDLE')
            order_shuttle = payload
            if(validate_order_proof(order_shuttle["order_proof"])):
                result = execute_actual_command(order_shuttle['oper'])
                ## cross-verify is this result matches the order_shuttle['result'],
                ## If not, some error in system. Re-config

                order_proof = order_shuttle['order_proof']
                result_proof = order_shuttle['result_proof']

                order_shuttle = process_order_shuttle(order_shuttle, order_proof, result_proof)
                send(('execute', order_shuttle, str(ind)), to= list_replicas[ind])
            else:
                print('Some error in order proof validation. Reconfigure the system...')
                ## Reconfig request from replica

    def process_order_shuttle(order_shuttle, order_proof, result_proof):
        order_proof.append({'ORDER', slot_no, order_shuttle['seqNo'], order_shuttle['oper']})
        slot_no += 1
        order_shuttle['order_proof'] = order_proof
        result_hash = "##THIS IS RESULT HASH##"
        result_proof.append({'RESULT', order_shuttle['seqNo'], order_shuttle['oper'], result_hash})
        order_shuttle['result_proof'] =result_proof
        return order_shuttle

    def validate_order_proof(order_proof):
        return True

    def execute_actual_command(operation):

        print('Executing actual operation command ...' + operation)
        result = ""
        ## execute operation on current state
        splits = operation.split("'")
        if(operation[0] == 'p'):
            core_data[splits[1]] = splits[3]
            result = "OK"
        elif(operation[0] == 'g'):
            if(splits[1] in core_data):
                result = core_data[splits[1]]
            else:
                result = ""
        elif(operation[0] == 'a'):
            if(splits[1] in core_data):
                core_data[splits[1]] = core_data[splits[1]] + splits[3]
                result = "OK"
            else:
                result = "fail"
        elif(operation[0] == 's'):
            start_end = splits[3].split(':')
            if((int(start_end[0]) >= 0) and (int(start_end[1]) <= len(core_data[splits[1]]))):
                core_data[splits[1]] = core_data[splits[1]][int(start_end[0]):int(start_end[1])]
                result = "OK"
            else:
                result = "OK"
        else:
            result = "fail"

        return result

    def receive(msg=('retrans', command, replica_index), from_= client1):
        print('sent')
        result = {'seqNo' : command['seqNo'], 'res' : 'result for ' + command['oper']}
        send(('retrans_res', result), to= client)

    def run():
        output('Started Replica...waiting for an operations...')
        await(terminate)
import sys

class Replica(process):
    def setup(olympus: Olympus, list_clients: list, list_replicas: list, config: set):
        self.history = {}
        self.cache = {}
        self.slot_no = 0
        self.core_data = {}
        self.terminate = False
        self.isImmutable = False

    def receive(msg=('result_shuttle', payload, replica_index), from_= sender):
        ind = int(replica_index) - 1
        print('Received the result shuttle')
        cache[str(payload['client']) + ' : ' + str(payload['seqNo']) ] = payload
        if(ind >= 0):
            send(('result_shuttle', payload, str(ind)), to= list_replicas[ind])

    def receive(msg=('execute', payload, replica_index), from_= sender):

        ind = int(replica_index) + 1
        if(ind == 1):
            print('head Received request from Client for task execution ', payload)

            ## HEAD case
            ## Verify if this slot is not already occupied and its previous is occupied.
            if(self.slot_no not in history and ( self.slot_no == 0 or (self.slot_no - 1) in history)) :
                result = execute_actual_command(payload['oper'])
                order_shuttle = payload
                order_shuttle['type'] = "Order Shuttle"
                order_shuttle['slot_no'] = self.slot_no
                order_shuttle['result'] = result
                order_proof = []
                result_proof = []
                order_stmt = (self.slot_no, payload['client'], payload['seqNo'], payload['oper'], );
                order_shuttle = process_order_shuttle(order_shuttle, order_proof, result_proof, order_stmt, result)
                history[order_shuttle['slot_no']] = order_stmt
                send(('execute', order_shuttle, str(ind)), to= list_replicas[ind])
                self.slot_no +=1
            else:
                print('invalid slot_no... or waiting for previous slot')
        elif(ind == (len(list_replicas))):

            print('In TAIL')
            ## TAIL case
            result = ""
            order_shuttle = payload
            order_stmt = ( payload['slot_no'],  payload['client'], payload['seqNo'], payload['oper']);
            if(validate_order_proof(order_shuttle["order_proof"],order_stmt)):
                result = execute_actual_command(order_shuttle['oper'])
                order_proof = order_shuttle['order_proof']
                result_proof = order_shuttle['result_proof']

                if not validate_result_proof(result_proof, result):
                    print('invalid result_proof')
                    ## Reconfig request from replica
                else :
                    order_shuttle = process_order_shuttle(order_shuttle, order_proof, result_proof, order_stmt, result)

                    history[order_shuttle['slot_no']] = order_stmt

                    clientResult = {}
                    clientResult['seqNo'] = order_shuttle['seqNo']
                    clientResult['client'] = order_shuttle['client']
                    clientResult['oper'] = order_shuttle['oper']
                    clientResult['result'] = result
                    clientResult['result_proof'] = order_shuttle['result_proof']
                    cache[str(order_shuttle['client']) + ' : ' + str(order_shuttle['seqNo'])] = clientResult

                    ## ind is already beyond last replica index. So subtract 2
                    ind = ind - 2
                    send(('result_shuttle', clientResult, str(ind)), to= list_replicas[ind])

                    ## Send Result to client
                    send(('execution_success', clientResult), to= payload['client'])
            else:
                print('Some error in order proof validation. Reconfigure the system...')
                ## Reconfig request from replica

        else:
            ## REST of the cases
            print('In MIDDLE')
            order_shuttle = payload
            order_stmt = (payload['slot_no'], payload['client'], payload['seqNo'], payload['oper']);
            if(validate_order_proof(order_shuttle["order_proof"],order_stmt)):
                result = execute_actual_command(order_shuttle['oper'])
                order_proof = order_shuttle['order_proof']
                result_proof = order_shuttle['result_proof']

                if not validate_result_proof(result_proof,result):
                    print('invalid result_proof')
                    ## Reconfig request from replica
                else :
                    order_shuttle = process_order_shuttle(order_shuttle, order_proof, result_proof, order_stmt, result)
                    history[order_shuttle['slot_no']] = order_stmt
                    send(('execute', order_shuttle, str(ind)), to= list_replicas[ind])
            else:
                print('Some error in order proof validation. Reconfigure the system...')
                ## Reconfig request from replica

    def process_order_shuttle(order_shuttle, order_proof, result_proof, order_stmt, result):
        order_proof.append(order_stmt)
        order_shuttle['order_proof'] = order_proof
        result_hash = "##THIS IS RESULT HASH of " + result + " ##";
        result_proof.append((order_shuttle['client'], order_shuttle['seqNo'], order_shuttle['oper'], result_hash))
        order_shuttle['result_proof'] =result_proof
        return order_shuttle

    def validate_order_proof(order_proof,order_stmt):
        #check if received slot no is not in history and the previous slot is finished
        slot_no = int(order_stmt[0])
        if(slot_no in history or ( slot_no != 0 and (slot_no - 1) not in history)) :
            return False
        for each_order_p in order_proof:
            if(each_order_p != order_stmt):
                return False;
        return True

    def validate_result_proof(result_proof,result):
        cur_hash = "##THIS IS RESULT HASH of " + result + " ##";
        for res_stmt in result_proof:
            if res_stmt[3] != cur_hash:
                return False
        return True;

    def execute_actual_command(operation):
        print('Executing actual operation command ...' + operation)
        result = ""
        ## execute operation on current state
        splits = operation.split("'")
        if(operation[0] == 'p'):
            ind = operation.index(',')
            ind1 = len(operation) - 2
            key = operation[5:ind]
            val = operation[ind+1 : ind1]
            core_data[key] = val
            result = "OK"
        elif(operation[0] == 'g'):
            ind = operation.index('(')+1
            ind1 = len(operation) - 1
            key = operation[ind: ind1]
            if(key in core_data):
                result = core_data[key]
            else:
                result = ""
        elif(operation[0] == 'a'):
            ind = operation.index(',')
            ind1 = len(operation) - 1
            key = operation[8:ind]
            val = operation[ind+1 : ind1]
            if(key in core_data):
                core_data[key] = str(core_data[key]) + str(val)
                result = "OK"
            else:
                result = "fail"
        elif(operation[0] == 's'):
            ind = operation.index(',')
            ind1 = len(operation) - 2
            key = operation[6:ind]
            ran = operation[ind+2 : ind1]
            start_end = ran.split(':')
            if(key in core_data and (int(start_end[0]) >= 0) and (int(start_end[1]) <= len(core_data[key]))):
                core_data[key] = core_data[key][int(start_end[0]):int(start_end[1])]
                result = "OK"
            else:
                result = "Fail"
        else:
            result = "fail"
        return result

    def receive(msg=('retrans', command, replica_index), from_= sender):
        print('Received retransmission...')
        cache_key = str(command['client']) + ' : ' + str(command['seqNo'])
        if(cache_key in cache):
            send(('retrans_res', cache[cache_key]), to= command['client'])
        elif(self.isImmutable):
            send(('Error - Replica Immutable'), to= command['client'])
        else:
            ind = int(replica_index) + 1
            if(ind == 1):
                ## HEAD
                #check if oper in history
                foundSlot = False
                for slot in history:
                    stmt = history[slot]
                    if(stmt[1] == command['client'] and stmt[2] == command['seqNo'] and stmt[3] == command['oper']):
                        foundSlot = True
                if not foundSlot:
                    send(('execute', command, '0'), to= self.list_replicas[0])
                ## Start the replica timer for retranmission
            else:
                ## send retrans to head and wait for result.
                send(('retrans', command, '0'), to= self.list_replicas[0])
            if await(cache_key in cache):
                    send(('retrans_res', cache[cache_key]), to= command['client'])
            elif timeout(5):
                    print('retrans failed, replica dint receive result shuttle')
                    ##send reconfig

    def run():
        print('Started Replica...waiting for an operations...')
        await(terminate)